Traceback (most recent call last):
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from sklearn.datasets import make_moons
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from IPython.display import HTML

# Generate synthetic 2D classification dataset
X, y = make_moons(n_samples=200, noise=0.3, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
n_samples = len(y_train)

# Create meshgrid for decision boundary visualization
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
X_grid = np.c_[xx.ravel(), yy.ravel()]

# Random Forest setup
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_probabilities = []
for k in range(1, 101):
    trees = rf.estimators_[:k]
    probs = np.mean([tree.predict_proba(X_grid)[:, 1] for tree in trees], axis=0)
    rf_probabilities.append(probs)

# XGBoost setup
xgb = XGBClassifier(n_estimators=100, random_state=42, eval_metric='logloss')
xgb.fit(X_train, y_train)
xgb_probabilities = []
for k in range(1, 101):
    xgb_temp = XGBClassifier(n_estimators=k, random_state=42, eval_metric='logloss')
    xgb_temp.fit(X_train, y_train)
    probs = xgb_temp.predict_proba(X_grid)[:, 1]
    xgb_probabilities.append(probs)

# AdaBoost with Weighted Errors implementation
def adaboost(X, y, n_estimators):
    y_ab = 2 * y - 1  # Convert labels to -1 and 1
    w = np.ones(len(y)) / len(y)
    models, alphas, weights_list = [], [], [w.copy()]
    for _ in range(n_estimators):
        clf = DecisionTreeClassifier(max_depth=1)
        clf.fit(X, y_ab, sample_weight=w)
        pred = clf.predict(X)
        err = np.sum(w * (pred != y_ab)) / np.sum(w)
        alpha = 0.5 * np.log((1 - err) / err)
        w = w * np.exp(-alpha * y_ab * pred)
        w /= np.sum(w)
        models.append(clf)
        alphas.append(alpha)
        weights_list.append(w.copy())
    return models, alphas, weights_list

adaboost_models, adaboost_alphas, weights_list = adaboost(X_train, y_train, 100)
h_m = [model.predict(X_grid) for model in adaboost_models]
adaboost_probabilities = []
S = np.zeros(len(X_grid))
for alpha, h in zip(adaboost_alphas, h_m):
    S += alpha * h
    prob = 1 / (1 + np.exp(-S))
    adaboost_probabilities.append(prob)

# Set up the figure and subplots
fig, axes = plt.subplots(1, 3, figsize=(15, 5))
axes[0].set_title('Random Forest')
axes[1].set_title('XGBoost')
axes[2].set_title('AdaBoost with Weighted Errors')

# Initial plots
pcm_rf = axes[0].pcolormesh(xx, yy, rf_probabilities[0].reshape(xx.shape), cmap='RdBu', shading='auto')
pcm_xgb = axes[1].pcolormesh(xx, yy, xgb_probabilities[0].reshape(xx.shape), cmap='RdBu', shading='auto')
pcm_ab = axes[2].pcolormesh(xx, yy, adaboost_probabilities[0].reshape(xx.shape), cmap='RdBu', shading='auto')

scatter_rf = axes[0].scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap='RdBu', s=20, edgecolor='k')
scatter_xgb = axes[1].scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap='RdBu', s=20, edgecolor='k')
s_ab = 50 * weights_list[0] * n_samples
scatter_ab = axes[2].scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap='RdBu', s=s_ab, edgecolor='k')

# Update function for animation
def update(k):
    pcm_rf.set_array(rf_probabilities[k].ravel())
    pcm_xgb.set_array(xgb_probabilities[k].ravel())
    pcm_ab.set_array(adaboost_probabilities[k].ravel())
    s_ab = 50 * weights_list[k + 1] * n_samples
    scatter_ab.set_sizes(s_ab)
    fig.suptitle(f'Number of Estimators: {k + 1}')
    return pcm_rf, pcm_xgb, pcm_ab, scatter_ab

# Create and display animation
anim = FuncAnimation(fig, update, frames=100, interval=200, blit=False)
plt.close()  # Prevent static display of the initial frame
HTML(anim.to_jshtml())
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mXGBoostError[0m                              Traceback (most recent call last)
Cell [0;32mIn[2], line 8[0m
[1;32m      6[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mensemble[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m RandomForestClassifier
[1;32m      7[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mtree[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m DecisionTreeClassifier
[0;32m----> 8[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01mxgboost[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m XGBClassifier
[1;32m      9[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01mIPython[39;00m[38;5;21;01m.[39;00m[38;5;21;01mdisplay[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m HTML
[1;32m     11[0m [38;5;66;03m# Generate synthetic 2D classification dataset[39;00m

File [0;32m/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/xgboost/__init__.py:6[0m
[1;32m      1[0m [38;5;124;03m"""XGBoost: eXtreme Gradient Boosting library.[39;00m
[1;32m      2[0m 
[1;32m      3[0m [38;5;124;03mContributors: https://github.com/dmlc/xgboost/blob/master/CONTRIBUTORS.md[39;00m
[1;32m      4[0m [38;5;124;03m"""[39;00m
[0;32m----> 6[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01m.[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m tracker  [38;5;66;03m# noqa[39;00m
[1;32m      7[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01m.[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m collective
[1;32m      8[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01m.[39;00m[38;5;21;01mcore[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m (
[1;32m      9[0m     Booster,
[1;32m     10[0m     DataIter,
[0;32m   (...)[0m
[1;32m     15[0m     build_info,
[1;32m     16[0m )

File [0;32m/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/xgboost/tracker.py:9[0m
[1;32m      6[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01menum[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m IntEnum, unique
[1;32m      7[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01mtyping[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m Dict, Optional, Union
[0;32m----> 9[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01m.[39;00m[38;5;21;01mcore[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m _LIB, _check_call, _deprecate_positional_args, make_jcargs
[1;32m     12[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mget_family[39m(addr: [38;5;28mstr[39m) [38;5;241m-[39m[38;5;241m>[39m [38;5;28mint[39m:
[1;32m     13[0m [38;5;250m    [39m[38;5;124;03m"""Get network family from address."""[39;00m

File [0;32m/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/xgboost/core.py:295[0m
[1;32m    291[0m     [38;5;28;01mreturn[39;00m lib
[1;32m    294[0m [38;5;66;03m# load the XGBoost library globally[39;00m
[0;32m--> 295[0m _LIB [38;5;241m=[39m [43m_load_lib[49m[43m([49m[43m)[49m
[1;32m    298[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21m_check_call[39m(ret: [38;5;28mint[39m) [38;5;241m-[39m[38;5;241m>[39m [38;5;28;01mNone[39;00m:
[1;32m    299[0m [38;5;250m    [39m[38;5;124;03m"""Check the return value of C API call[39;00m
[1;32m    300[0m 
[1;32m    301[0m [38;5;124;03m    This function will raise exception when error occurs.[39;00m
[0;32m   (...)[0m
[1;32m    307[0m [38;5;124;03m        return value from API calls[39;00m
[1;32m    308[0m [38;5;124;03m    """[39;00m

File [0;32m/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/xgboost/core.py:257[0m, in [0;36m_load_lib[0;34m()[0m
[1;32m    255[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m lib_success:
[1;32m    256[0m         libname [38;5;241m=[39m os[38;5;241m.[39mpath[38;5;241m.[39mbasename(lib_paths[[38;5;241m0[39m])
[0;32m--> 257[0m         [38;5;28;01mraise[39;00m XGBoostError(
[1;32m    258[0m             [38;5;124mf[39m[38;5;124m"""[39m
[1;32m    259[0m [38;5;124mXGBoost Library ([39m[38;5;132;01m{[39;00mlibname[38;5;132;01m}[39;00m[38;5;124m) could not be loaded.[39m
[1;32m    260[0m [38;5;124mLikely causes:[39m
[1;32m    261[0m [38;5;124m  * OpenMP runtime is not installed[39m
[1;32m    262[0m [38;5;124m    - vcomp140.dll or libgomp-1.dll for Windows[39m
[1;32m    263[0m [38;5;124m    - libomp.dylib for Mac OSX[39m
[1;32m    264[0m [38;5;124m    - libgomp.so for Linux and other UNIX-like OSes[39m
[1;32m    265[0m [38;5;124m    Mac OSX users: Run `brew install libomp` to install OpenMP runtime.[39m
[1;32m    266[0m 
[1;32m    267[0m [38;5;124m  * You are running 32-bit Python on a 64-bit OS[39m
[1;32m    268[0m 
[1;32m    269[0m [38;5;124mError message(s): [39m[38;5;132;01m{[39;00mos_error_list[38;5;132;01m}[39;00m
[1;32m    270[0m [38;5;124m"""[39m
[1;32m    271[0m         )
[1;32m    272[0m     _register_log_callback(lib)
[1;32m    274[0m     libver [38;5;241m=[39m _lib_version(lib)

[0;31mXGBoostError[0m: 
XGBoost Library (libxgboost.dylib) could not be loaded.
Likely causes:
  * OpenMP runtime is not installed
    - vcomp140.dll or libgomp-1.dll for Windows
    - libomp.dylib for Mac OSX
    - libgomp.so for Linux and other UNIX-like OSes
    Mac OSX users: Run `brew install libomp` to install OpenMP runtime.

  * You are running 32-bit Python on a 64-bit OS

Error message(s): ["dlopen(/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/xgboost/lib/libxgboost.dylib, 0x0006): Library not loaded: @rpath/libomp.dylib\n  Referenced from: <8E129FE8-EF1C-38EA-A9CF-202782564052> /Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/xgboost/lib/libxgboost.dylib\n  Reason: tried: '/opt/homebrew/opt/libomp/lib/libomp.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/opt/homebrew/opt/libomp/lib/libomp.dylib' (no such file), '/opt/homebrew/opt/libomp/lib/libomp.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/opt/homebrew/opt/libomp/lib/libomp.dylib' (no such file)"]


