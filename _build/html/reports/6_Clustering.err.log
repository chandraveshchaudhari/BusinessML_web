Traceback (most recent call last):
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Volumes/MacSSD/Machine Learning for Business/.venv/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------



# Step 1: Import KMeans and Reduce Data

from sklearn.cluster import KMeans

# Use 2D PCA coordinates of stocks (each stock is a point)
X_cluster = W.T  # shape (2, num_stocks)
X_cluster = X_cluster.T  # shape (num_stocks, 2)
print("Clustering Data Shape:", X_cluster.shape)  # (10, 2)

# KMeans clustering (e.g., 3 clusters)
kmeans = KMeans(n_clusters=3, random_state=42)
labels = kmeans.fit_predict(X_cluster)




# Step 2: Visualize Clusters in 2D PCA Space

# Plot stocks with cluster colors
plt.figure(figsize=(10, 7))

colors = ['red', 'green', 'blue', 'purple', 'orange']
for i, ticker in enumerate(tickers):
    plt.scatter(X_cluster[i, 0], X_cluster[i, 1], color=colors[labels[i] % len(colors)], s=100)
    plt.text(X_cluster[i, 0]+0.01, X_cluster[i, 1]+0.01, ticker, fontsize=12)

plt.title('KMeans Clustering of Stocks in 2D PCA Space')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.grid(True)
plt.axis('equal')
plt.show()





# Step 3 (Optional): Cluster Membership Table

# Show which stocks belong to which cluster
df_clusters = pd.DataFrame({'Stock': tickers, 'Cluster': labels})
df_clusters = df_clusters.sort_values('Cluster')
print(df_clusters)






------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 6[0m
[1;32m      3[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mcluster[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m KMeans
[1;32m      5[0m [38;5;66;03m# Use 2D PCA coordinates of stocks (each stock is a point)[39;00m
[0;32m----> 6[0m X_cluster [38;5;241m=[39m [43mW[49m[38;5;241m.[39mT  [38;5;66;03m# shape (2, num_stocks)[39;00m
[1;32m      7[0m X_cluster [38;5;241m=[39m X_cluster[38;5;241m.[39mT  [38;5;66;03m# shape (num_stocks, 2)[39;00m
[1;32m      8[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mClustering Data Shape:[39m[38;5;124m"[39m, X_cluster[38;5;241m.[39mshape)  [38;5;66;03m# (10, 2)[39;00m

[0;31mNameError[0m: name 'W' is not defined

